base64 /dev/urandom | head -c 1000 | grep 42 | wc -l | sed -e 's/1/Yes/g' -e 's/0/No/g'

$> foo
It must fail with a proper error message and then give back the prompt.

• Run the following command:
$> /bin/ls
ls  must be properly executed and then give back the prompt.

• Run the following command
$> /bin/ls -laF

• Run the following command
$> /bin/ls -l -a -F

• Run 21sh, then run the following command:
$> exit

• Run a command such as
$> echo "It works"

• Run a command such as
$> echo It works

• Run a command such as
$> cd /absolute/path/of/your/choice

Then, run the following command
$> /bin/pwd

• Run a command such as
$> cd relative/path/of/your/choice

then run the following command
$> /bin/pwd

• Run the following command:
$> cd

Then run
$> /bin/pwd


• Run the following command:
$> cd -

$> /bin/pwd

• Run the following command:
$> cd ~/path/of/your/choice

$> /bin/pwd

• Run the following command:
$> env

.  The environment variables must be displayed as  key=value .
• Run a command such as:
$> setenv FOO bar
or
$> setenv FOO=bar

• Run the following command:
$> /usr/bin/env

• Run the following command:
$> unsetenv FOO

• Run the following command again:
$> unsetenv FOO

• Run the following command again:
$> /usr/bin/env

• Run the following command:
$> unsetenv PATH

Then, run
$> setenv PATH "/bin:/usr/bin"
or
$> setenv "PATH=/bin:/usr/bin"

$> ls

• Run the following command
$> emacs

• Run the following command
$> unsetenv PATH

• Run now the following command
$> emacs

• Run the following command:
$> /bin/ls

• Run the following command:
$> /usr/bin/emacs

• Run an empty command:
$>

• Run a command made of just a single space:
$>

• Run a command made of spaces and tabulations. The shell must do nothing and give back the prompt.
$>     /bin/ls      -l     -A

• Run the following command:
$> cat

• Run the following command:
$> ls | cat -e

• Run the following command:
$> ls | sort | cat -e

$> base64 /dev/urandom | head -c 1000 | grep 42 | wc -l | sed -e 's/1/Yes/g' -e 's/0/No/g'


• Run the following command:
$> echo "Testing redirections," > /tmp/test.txt

• Run the following command:
$> echo "with multiple lines" >> /tmp/test.txt

• Run the following command:
$> wc -c < /tmp/test.txt
Check that the displayed value is 42.

• Run the following command:
$> cat -e << EOF
Roses are red
Violets are blue
All my base are belong to you
And so are you
Then press  CTRL+D  to stop the input. The command's output  must be exactly as follow:
Roses are red$ Violets are blue$ All my base are belong to you$ And so are you$

• Run the following command:
$> cat -e << EOF >> /tmp/test.txt
Write the last poem once more. Check that the  /tmp/test.txt  file contains the following 6 lines:
25/01/2021 Intra Projects 21sh Edit
https://projects.intra.42.fr/scale_teams/2962683/edit 9/13
Testing redirections, with multiple lines Roses are red$ Violets are blue$ All my base are belong to you$ And so are you$
If a single one of these tests fails, no points should be given for this section - you can move to the next one.
Several commands following each other
In this section, we'll evaluate the management of several commands following one another with the  ;  separator. Execute thefollowing test.  Run the following command
$> ls -1; touch newfile  ; ls -1
Both  ls  must be executed, the only difference being the  newfile  file.  If it fails, no points should be given for this section - you can move to the next one.
A lil’ bit of everything
In this section, we'll evaluate pipe, redirections,  ;  altogether.  Execute the following tests:
• Run the following command:
$> mkdir test ; cd test ; ls -a ; ls | cat | wc -c > fifi ; cat fifi
The output must be:
. ..        5
• Run the following command:  Type the following poem with the newlines:
$> cd /tmp; sort << EOF | cat -e > sorted_poem ; sed -e 's/Roses/Turnips/' < so
 Yes  No
 Yes  No
